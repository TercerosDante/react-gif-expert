{"version":3,"sources":["components/AddCategory.js","components/GiftGridItem.js","helpers/getGifs.js","components/GiftGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","prev","trim","length","includes","newVal","className","type","placeholder","value","onChange","target","GiftGridItem","title","url","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","id","images","downsized_medium","GiftGrid","loading","state","setState","useEffect","then","useFetchGifs","GiftExpertApp","categories","root","document","getElementById","ReactDOM","render"],"mappings":"2LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACE,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBACFN,GAAc,SAACO,GACb,GAAIL,EAAWM,OAAOC,SAAWF,EAAKG,SAASR,GAAa,CAC1D,IAAMS,EAAM,CAAIT,GAAJ,mBAAmBK,IAE/B,OADAJ,EAAc,IACPQ,EAET,OAAOJ,MAKT,SACE,uBACEK,UAAU,qBACVC,KAAK,OACLC,YAAY,eACZC,MAAOb,EACPc,SAvBiB,SAACX,GACtBF,EAAcE,EAAEY,OAAOF,a,QCRdG,EAAe,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACpC,OACE,sBAAKR,UAAU,6CAAf,UACE,qBAAKS,IAAKD,EAAKE,IAAKH,IACpB,4BAAIA,Q,uBCJGI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfL,EADe,iDACiCM,UAAUF,GAD3C,+DAEEG,MAAMP,GAFR,cAEfQ,EAFe,gBAGGA,EAASC,OAHZ,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QAPf,kBASdW,GATc,4CAAH,sDCKPM,EAAW,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SACzB,ECH0B,SAACA,GAC3B,MAA0BvB,mBAAS,CACjC6B,KAAM,GACNQ,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OAPAC,qBAAU,WACRlB,EAAQC,GACLkB,MAAK,SAAAP,GACJK,EAAS,CAAEV,KAAMK,EAAQG,SAAS,SAErC,CAACd,IAEGe,EDV2BI,CAAanB,GAAjCW,EAAd,EAAQL,KAAcQ,EAAtB,EAAsBA,QACtB,OACE,sBAAK1B,UAAU,UAAf,UACE,6BAAKY,IACHc,GAAW,mBAAG1B,UAAU,UAAb,wBACb,qBAAKA,UAAU,iBAAf,SAEIuB,EAAOH,KAAI,SAACC,GACV,OACE,cAAC,EAAD,eAAgCA,GAAbA,EAAIC,aEWtBU,EAtBO,WAEpB,MAAoC3C,mBAAS,IAA7C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACE,qCACE,iDACE,cAAC,EAAD,CAAaA,cAAeA,IAC9B,uBACA,8BAEI6C,EAAWb,KAAK,SAAAR,GACd,OACE,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,YCbvBsB,G,MAAOC,SAASC,eAAe,SAErCC,IAASC,OAAO,cAAC,EAAD,IAAmBJ,K","file":"static/js/main.7c36a3f2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  \n  const [inputValue, setInputValue] = useState('');\n  \n  const handleOnChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCategories((prev) => {\n      if (inputValue.trim().length && !prev.includes(inputValue)) {\n        const newVal = [inputValue, ...prev];\n        setInputValue('');\n        return newVal;\n      }\n      return prev;\n    });\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        className=\"add-category-input\"\n        type=\"text\"\n        placeholder=\"Add category\"\n        value={inputValue}\n        onChange={handleOnChange}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n\n","export const GiftGridItem = ({ title, url }) => {\n  return (\n    <div className='card animate__animated animate__zoomInDown'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n}\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=VIvIeIe51YDgV2kSz1sqzTCjNm47OBdj`;\n  const response = await fetch(url);\n  const { data } = (await response.json())\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url\n  }))\n  return gifs;\n}\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { GiftGridItem } from './GiftGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GiftGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n  return (\n    <div className=\"wrapper\">\n      <h3>{category}</h3>\n      { loading && <p className=\"loading\" >loading...</p> }\n      <div className=\"card-container\">\n        {\n          images.map((img) => {\n            return (\n              <GiftGridItem key={img.id} { ...img } />\n            );\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nGiftGrid.propTypes = {\n  category: PropTypes.string.isRequired\n};\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n  \n  useEffect(() => {\n    getGifs(category)\n      .then(images => {\n        setState({ data: images, loading: false })\n      });\n  }, [category]);\n  \n  return state;   \n};\n","import { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GiftGrid } from './components/GiftGrid';\n\nconst GiftExpertApp = () => {\n  \n  const [categories, setCategories] = useState([]);\n  \n  return (\n    <>\n      <h2>Gift expert app</h2>\n        <AddCategory setCategories={setCategories} />\n      <hr />      \n      <div >\n        {\n          categories.map((category => {\n            return (\n              <GiftGrid key={category} category={category} />\n            );\n          }))\n        }\n      </div>\n    </>\n  );\n};\n\nexport default GiftExpertApp;\n","import ReactDOM from 'react-dom';\nimport GiftExpertApp from './GiftExpertApp';\nimport './index.css';\n\nconst root = document.getElementById('root')\n\nReactDOM.render(<GiftExpertApp />, root);\n"],"sourceRoot":""}